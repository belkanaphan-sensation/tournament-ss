plugins {
    id 'java'
    id 'org.springframework.boot' version '3.5.5'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'org.liquibase.gradle' version '2.2.0'
    id 'com.diffplug.spotless' version '6.25.0'
}

group = 'org.bn'
version = '0.0.1-SNAPSHOT'
description = 'sensation tournament module'

ext {
    set('springBootVersion', '3.5.5')
    set('lombokVersion', '1.18.36')
    set('validationVersion', '3.1.0')
    set('liquibaseVersion', '4.33.0')
    set('openApiVersion', '2.7.0')
    set('mapstructVersion', '1.6.3')
    set('mockitoVersion', '5.14.0')
    set('guavaVersion', '33.4.8-jre')
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
    // конфигурация для mockito-agent
    mockitoAgent
}

repositories {
    mavenCentral()
    maven { url = 'https://repo.spring.io/snapshot' }
}

dependencies {
    //swagger
    implementation "org.springdoc:springdoc-openapi-starter-webmvc-ui:$openApiVersion"

    implementation "org.springframework.boot:spring-boot-starter:$springBootVersion"
    implementation "org.springframework.boot:spring-boot-starter-data-jpa:$springBootVersion"
    implementation "org.springframework.boot:spring-boot-starter-web:$springBootVersion"
    implementation "org.springframework.boot:spring-boot-starter-security:$springBootVersion"
    implementation "jakarta.validation:jakarta.validation-api:$validationVersion"

    compileOnly "org.projectlombok:lombok:$lombokVersion"
    annotationProcessor "org.projectlombok:lombok:$lombokVersion"

    implementation 'org.postgresql:postgresql'
    implementation 'org.liquibase:liquibase-core'

    implementation "org.mapstruct:mapstruct:$mapstructVersion"
    annotationProcessor "org.mapstruct:mapstruct-processor:$mapstructVersion"

    implementation 'org.springframework.boot:spring-boot-starter-validation'

    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'
    implementation "com.google.guava:guava:$guavaVersion"

    testImplementation "org.springframework.boot:spring-boot-starter-test:$springBootVersion"
    testImplementation 'com.h2database:h2'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    // mockito
    testImplementation "org.mockito:mockito-core:$mockitoVersion"
    mockitoAgent("org.mockito:mockito-core:$mockitoVersion") {
        transitive = false
    }

    developmentOnly 'org.springframework.boot:spring-boot-docker-compose'
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.boot:spring-boot-dependencies:$springBootVersion"
    }
}

liquibase {
    activities {
        register("main") {
            changeLogFile = 'src/main/resources/db/changelog/db.changelog-master.yaml'
            url = 'jdbc:postgresql://localhost:9432/sensation'
            username = 'postgres'
            password = 'postgres'
            defaultSchemaName = 'sensation'
        }
    }
    runList = ['main']
}

tasks.named('test') {
    useJUnitPlatform()
    // подключение mockito agent
    jvmArgs += "-javaagent:${configurations.mockitoAgent.asPath}"
}

spotless {
    java {
        target 'src/**/*.java'
        // Удаляет неиспользуемые импорты
        removeUnusedImports()
        // Задаём порядок импортов + пустые строки между группами
        // Мне больше нравится поручать это форматирование идее, т.к. она форматирует на лету
        // и не надо ничего дополнительно применять, потому я убрала
//        importOrder(
//                'static javax',
//                'static org',
//                'static com',
//                'static',
//
//                'java',
//                'javax',
//                'org',
//                'com',
//                ''
//        )

        // Убирает trailing пробелы
        trimTrailingWhitespace()
        // Заменяет табы на пробелы
        indentWithSpaces(4)
        // Убирает пустые строки в конце файла
        endWithNewline()
    }

    // Для других типов файлов (опционально)
    format 'misc', {
        target '**/*.gradle', '**/*.md', '**/.gitignore'
        trimTrailingWhitespace()
        indentWithSpaces(4)
        endWithNewline()
    }
}
//
//// Полезные задачи для разработки
//tasks.named('spotlessJava').configure {
//    dependsOn 'spotlessCheck'
//}
