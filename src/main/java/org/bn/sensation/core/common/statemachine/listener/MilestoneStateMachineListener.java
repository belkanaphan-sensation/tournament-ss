package org.bn.sensation.core.common.statemachine.listener;

import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;

import org.bn.sensation.core.common.statemachine.event.MilestoneEvent;
import org.bn.sensation.core.common.statemachine.state.MilestoneState;
import org.springframework.messaging.Message;
import org.springframework.statemachine.StateContext;
import org.springframework.statemachine.StateMachine;
import org.springframework.statemachine.listener.StateMachineListener;
import org.springframework.statemachine.state.State;
import org.springframework.statemachine.transition.Transition;
import org.springframework.stereotype.Component;

import lombok.extern.slf4j.Slf4j;

@Slf4j
@Component
public class MilestoneStateMachineListener implements StateMachineListener<MilestoneState, MilestoneEvent> {

    private static final DateTimeFormatter TIME_FORMATTER = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss.SSS");

    // ThreadLocal –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è ID —ç—Ç–∞–ø–∞ –≤ —Ç–µ–∫—É—â–µ–º –ø–æ—Ç–æ–∫–µ
    private static final ThreadLocal<Long> MILESTONE_ID_CONTEXT = new ThreadLocal<>();

    // Map –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è ID —ç—Ç–∞–ø–∞ –ø–æ ID State Machine
    private static final Map<String, Long> STATE_MACHINE_TO_MILESTONE_ID = new ConcurrentHashMap<>();

    @Override
    public void stateChanged(State<MilestoneState, MilestoneEvent> from, State<MilestoneState, MilestoneEvent> to) {
        String timestamp = LocalDateTime.now().format(TIME_FORMATTER);

        if (from != null && to != null) {
            log.info("üîÑ [MILESTONE_STATE_CHANGE] {} | {} ‚Üí {} | Time: {}",
                getMilestoneId(), from.getId(), to.getId(), timestamp);
        } else if (to != null) {
            log.info("üÜï [MILESTONE_STATE_INIT] {} | Initial state: {} | Time: {}",
                getMilestoneId(), to.getId(), timestamp);
        }
    }

    @Override
    public void stateEntered(State<MilestoneState, MilestoneEvent> state) {
        String timestamp = LocalDateTime.now().format(TIME_FORMATTER);
        log.debug("üì• [MILESTONE_STATE_ENTER] {} | Entered state: {} | Time: {}",
            getMilestoneId(), state.getId(), timestamp);
    }

    @Override
    public void stateExited(State<MilestoneState, MilestoneEvent> state) {
        String timestamp = LocalDateTime.now().format(TIME_FORMATTER);
        log.debug("üì§ [MILESTONE_STATE_EXIT] {} | Exited state: {} | Time: {}",
            getMilestoneId(), state.getId(), timestamp);
    }

    @Override
    public void eventNotAccepted(Message<MilestoneEvent> event) {
        String timestamp = LocalDateTime.now().format(TIME_FORMATTER);
        log.warn("‚ùå [MILESTONE_EVENT_REJECTED] {} | Event: {} | Time: {}",
            getMilestoneId(), event.getPayload(), timestamp);
    }

    @Override
    public void transition(Transition<MilestoneState, MilestoneEvent> transition) {
        String timestamp = LocalDateTime.now().format(TIME_FORMATTER);

        if (transition.getSource() != null && transition.getTarget() != null) {
            log.info("üîÑ [MILESTONE_TRANSITION] {} | {} ‚Üí {} | Event: {} | Time: {}",
                getMilestoneId(),
                transition.getSource().getId(),
                transition.getTarget().getId(),
                transition.getTrigger().getEvent(),
                timestamp);
        }
    }

    @Override
    public void transitionStarted(Transition<MilestoneState, MilestoneEvent> transition) {
        String timestamp = LocalDateTime.now().format(TIME_FORMATTER);
        log.debug("üöÄ [MILESTONE_TRANSITION_START] {} | {} ‚Üí {} | Event: {} | Time: {}",
            getMilestoneId(),
            transition.getSource().getId(),
            transition.getTarget().getId(),
            transition.getTrigger().getEvent(),
            timestamp);
    }

    @Override
    public void transitionEnded(Transition<MilestoneState, MilestoneEvent> transition) {
        String timestamp = LocalDateTime.now().format(TIME_FORMATTER);
        log.debug("‚úÖ [MILESTONE_TRANSITION_END] {} | {} ‚Üí {} | Event: {} | Time: {}",
            getMilestoneId(),
            transition.getSource().getId(),
            transition.getTarget().getId(),
            transition.getTrigger().getEvent(),
            timestamp);
    }

    @Override
    public void stateMachineStarted(StateMachine<MilestoneState, MilestoneEvent> stateMachine) {
        String timestamp = LocalDateTime.now().format(TIME_FORMATTER);
        log.info("üü¢ [MILESTONE_SM_START] {} | State Machine started | Time: {}",
            getMilestoneId(stateMachine), timestamp);
    }

    @Override
    public void stateMachineStopped(StateMachine<MilestoneState, MilestoneEvent> stateMachine) {
        String timestamp = LocalDateTime.now().format(TIME_FORMATTER);
        log.info("üî¥ [MILESTONE_SM_STOP] {} | State Machine stopped | Time: {}",
            getMilestoneId(stateMachine), timestamp);
    }

    @Override
    public void stateMachineError(StateMachine<MilestoneState, MilestoneEvent> stateMachine, Exception exception) {
        String timestamp = LocalDateTime.now().format(TIME_FORMATTER);
        log.error("üí• [MILESTONE_SM_ERROR] {} | Error: {} | Time: {}",
            getMilestoneId(stateMachine), exception.getMessage(), timestamp, exception);
    }

    @Override
    public void extendedStateChanged(Object key, Object value) {
        String timestamp = LocalDateTime.now().format(TIME_FORMATTER);
        log.debug("üîß [MILESTONE_EXTENDED_STATE] {} | Key: {} | Value: {} | Time: {}",
            getMilestoneId(), key, value, timestamp);
    }

    @Override
    public void stateContext(StateContext<MilestoneState, MilestoneEvent> stateContext) {
        String timestamp = LocalDateTime.now().format(TIME_FORMATTER);

        // –õ–æ–≥–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è –≤–∞–∂–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
        if (stateContext.getEvent() != null) {
            log.debug("üìã [MILESTONE_CONTEXT] {} | Event: {} | Headers: {} | Time: {}",
                getMilestoneId(),
                stateContext.getEvent(),
                stateContext.getMessageHeaders(),
                timestamp);
        }
    }

    /**
     * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç ID —ç—Ç–∞–ø–∞ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ—Ç–æ–∫–∞
     */
    public static void setMilestoneId(Long milestoneId) {
        MILESTONE_ID_CONTEXT.set(milestoneId);
    }

    /**
     * –û—á–∏—â–∞–µ—Ç ID —ç—Ç–∞–ø–∞ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ—Ç–æ–∫–∞
     */
    public static void clearMilestoneId() {
        MILESTONE_ID_CONTEXT.remove();
    }

    /**
     * –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç —Å–≤—è–∑—å –º–µ–∂–¥—É State Machine –∏ Milestone ID
     */
    public static void registerStateMachine(String stateMachineId, Long milestoneId) {
        STATE_MACHINE_TO_MILESTONE_ID.put(stateMachineId, milestoneId);
    }

    /**
     * –£–¥–∞–ª—è–µ—Ç —Å–≤—è–∑—å –º–µ–∂–¥—É State Machine –∏ Milestone ID
     */
    public static void unregisterStateMachine(String stateMachineId) {
        if (stateMachineId != null) {
            STATE_MACHINE_TO_MILESTONE_ID.remove(stateMachineId);
        }
    }

    private String getMilestoneId() {
        // –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–∑ ThreadLocal
        Long milestoneId = MILESTONE_ID_CONTEXT.get();
        if (milestoneId != null) {
            return "MILESTONE_" + milestoneId;
        }

        // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—â–∏–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä
        return "MILESTONE_" + Thread.currentThread().threadId();
    }

    private String getMilestoneId(StateMachine<MilestoneState, MilestoneEvent> stateMachine) {
        // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å ID —ç—Ç–∞–ø–∞ –ø–æ ID State Machine
        String stateMachineId = stateMachine.getId();
        if (stateMachineId != null) {
            Long milestoneId = STATE_MACHINE_TO_MILESTONE_ID.get(stateMachineId);
            if (milestoneId != null) {
                return "MILESTONE_" + milestoneId;
            }
        }

        // Fallback –∫ ThreadLocal
        return getMilestoneId();
    }
}
