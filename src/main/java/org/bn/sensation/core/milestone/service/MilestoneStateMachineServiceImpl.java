package org.bn.sensation.core.milestone.service;

import org.bn.sensation.core.common.statemachine.event.MilestoneEvent;
import org.bn.sensation.core.common.statemachine.listener.MilestoneStateMachineListener;
import org.bn.sensation.core.common.statemachine.state.MilestoneState;
import org.bn.sensation.core.milestone.entity.MilestoneEntity;
import org.bn.sensation.core.milestone.repository.MilestoneRepository;
import org.springframework.messaging.Message;
import org.springframework.messaging.support.MessageBuilder;
import org.springframework.statemachine.StateMachine;
import org.springframework.statemachine.config.StateMachineFactory;
import org.springframework.statemachine.support.DefaultStateMachineContext;
import org.springframework.stereotype.Service;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import reactor.core.publisher.Mono;

@Slf4j
@Service
@RequiredArgsConstructor
public class MilestoneStateMachineServiceImpl implements MilestoneStateMachineService {

    private final MilestoneRepository milestoneRepository;
    private final MilestoneService milestoneService;
    private final StateMachineFactory<MilestoneState, MilestoneEvent> milestoneStateMachine;

    @Override
    public void sendEvent(Long milestoneId, MilestoneEvent event) {
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º ID —ç—Ç–∞–ø–∞ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        MilestoneStateMachineListener.setMilestoneId(milestoneId);

        try {
            MilestoneEntity milestone =  milestoneRepository.getByIdFullOrThrow(milestoneId);

            log.info("üéØ [MILESTONE_EVENT_START] Milestone ID: {} | Event: {} | Current State: {}",
                milestoneId, event, milestone.getState());

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏—Ç—Å—è –ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            MilestoneState nextState = milestoneService.getNextState(milestone.getState(), event);
            if (nextState == milestone.getState()) {
                log.info("‚ÑπÔ∏è [MILESTONE_EVENT_NO_CHANGE] Round ID: {} | Event: {} | State remains: {}",
                        milestoneId, event, milestone.getState());
                return; // –°–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ –º–µ–Ω—è–µ—Ç—Å—è, –ø—Ä–æ—Å—Ç–æ –≤—ã—Ö–æ–¥–∏–º
            }

            if (!milestoneService.isValidTransition(milestone.getState(), event)) {
                log.warn("‚ùå [MILESTONE_EVENT_REJECTED] Milestone ID: {} | Invalid transition from {} to {}",
                    milestoneId, milestone.getState(), event);
                throw new IllegalStateException(
                        String.format("–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥ –∏–∑ %s –≤ %s", milestone.getState(), event));
            }

            if (milestoneService.canTransition(milestone, event)) {
                StateMachine<MilestoneState, MilestoneEvent> sm = milestoneStateMachine.getStateMachine(milestone.getId().toString());

                // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Å–≤—è–∑—å –º–µ–∂–¥—É State Machine –∏ Milestone ID
                MilestoneStateMachineListener.registerStateMachine(sm.getId(), milestoneId);

                // –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                Message<MilestoneEvent> message = MessageBuilder
                        .withPayload(event)
                        .setHeader("milestone", milestone)
                        .build();

                log.debug("üì§ [MILESTONE_MESSAGE_CREATED] Milestone ID: {} | Event: {} | Headers: {}",
                    milestoneId, event, message.getHeaders());

                // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ)
                sm.stop();
                sm.getStateMachineAccessor()
                        .doWithAllRegions(access -> access.resetStateMachine(
                                new DefaultStateMachineContext<>(milestone.getState(), null, null, null)
                        ));
                sm.start();

                log.debug("üîÑ [MILESTONE_SM_INITIALIZED] Milestone ID: {} | State: {}",
                    milestoneId, milestone.getState());

                // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–∫—Ç–∏–≤–Ω—ã–π API –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–±—ã—Ç–∏—è
                sm.sendEvent(Mono.just(message))
                        .doFinally(signalType -> {
                            log.debug("üèÅ [MILESTONE_EVENT_COMPLETED] Milestone ID: {} | Signal: {}",
                                milestoneId, signalType);
                            sm.stop();
                            MilestoneStateMachineListener.unregisterStateMachine(sm.getId());
                        })
                        .blockLast(); // –ë–ª–æ–∫–∏—Ä—É–µ–º –¥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π

                log.info("‚úÖ [MILESTONE_EVENT_SUCCESS] Milestone ID: {} | Event: {} | Final State: {}",
                    milestoneId, event, milestone.getState());
            } else {
                log.warn("üö´ [MILESTONE_EVENT_BLOCKED] Milestone ID: {} | Event: {} | Reason: Business logic validation failed",
                    milestoneId, event);
            }
        } finally {
            // –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
            MilestoneStateMachineListener.clearMilestoneId();
        }
    }

}
