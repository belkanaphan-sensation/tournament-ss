package org.bn.sensation.core.round.service;

import org.bn.sensation.core.common.statemachine.event.RoundEvent;
import org.bn.sensation.core.common.statemachine.listener.RoundStateMachineListener;
import org.bn.sensation.core.common.statemachine.state.RoundState;
import org.bn.sensation.core.round.entity.RoundEntity;
import org.bn.sensation.core.round.repository.RoundRepository;
import org.springframework.messaging.Message;
import org.springframework.messaging.support.MessageBuilder;
import org.springframework.statemachine.StateMachine;
import org.springframework.statemachine.config.StateMachineFactory;
import org.springframework.statemachine.support.DefaultStateMachineContext;
import org.springframework.stereotype.Service;

import jakarta.persistence.EntityNotFoundException;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import reactor.core.publisher.Mono;

@Slf4j
@Service
@RequiredArgsConstructor
public class RoundStateMachineServiceImpl implements RoundStateMachineService {

    private final RoundRepository roundRepository;
    private final RoundService roundService;
    private final StateMachineFactory<RoundState, RoundEvent> roundStateMachine;

    @Override
    public void sendEvent(Long roundId, RoundEvent event) {
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º ID —Ä–∞—É–Ω–¥–∞ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        RoundStateMachineListener.setRoundId(roundId);

        try {
            RoundEntity round = roundRepository.findByIdWithUserAssignments(roundId)
                    .orElseThrow(() -> new EntityNotFoundException("Round not found"));

            log.info("üéØ [ROUND_EVENT_START] Round ID: {} | Event: {} | Current State: {}",
                roundId, event, round.getState());

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏—Ç—Å—è –ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            RoundState nextState = roundService.getNextState(round.getState(), event);
            if (nextState == round.getState()) {
                log.info("‚ÑπÔ∏è [ROUND_EVENT_NO_CHANGE] Round ID: {} | Event: {} | State remains: {}",
                    roundId, event, round.getState());
                return; // –°–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ –º–µ–Ω—è–µ—Ç—Å—è, –ø—Ä–æ—Å—Ç–æ –≤—ã—Ö–æ–¥–∏–º
            }

            if (!roundService.isValidTransition(round.getState(), event)) {
                log.warn("‚ùå [ROUND_EVENT_REJECTED] Round ID: {} | Invalid transition from {} to {}",
                    roundId, round.getState(), event);
                throw new IllegalStateException(
                        String.format("–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥ –∏–∑ %s –≤ %s", round.getState(), event));
            }

            if (roundService.canTransition(round, event)) {
                StateMachine<RoundState, RoundEvent> sm = roundStateMachine.getStateMachine(round.getId().toString());

                // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Å–≤—è–∑—å –º–µ–∂–¥—É State Machine –∏ Round ID
                RoundStateMachineListener.registerStateMachine(sm.getId(), roundId);

                // –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                Message<RoundEvent> message = MessageBuilder
                        .withPayload(event)
                        .setHeader("round", round)
                        .build();

                log.debug("üì§ [ROUND_MESSAGE_CREATED] Round ID: {} | Event: {} | Headers: {}",
                    roundId, event, message.getHeaders());

                // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ)
                sm.stop();
                sm.getStateMachineAccessor()
                        .doWithAllRegions(access -> access.resetStateMachine(
                                new DefaultStateMachineContext<>(round.getState(), null, null, null)
                        ));
                sm.start();

                log.debug("üîÑ [ROUND_SM_INITIALIZED] Round ID: {} | State: {}",
                    roundId, round.getState());

                // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–∫—Ç–∏–≤–Ω—ã–π API –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–±—ã—Ç–∏—è
                sm.sendEvent(Mono.just(message))
                        .doFinally(signalType -> {
                            log.debug("üèÅ [ROUND_EVENT_COMPLETED] Round ID: {} | Signal: {}",
                                roundId, signalType);
                            sm.stop();
                            RoundStateMachineListener.unregisterStateMachine(sm.getId());
                        })
                        .blockLast(); // –ë–ª–æ–∫–∏—Ä—É–µ–º –¥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π

                log.info("‚úÖ [ROUND_EVENT_SUCCESS] Round ID: {} | Event: {} | Final State: {}",
                    roundId, event, round.getState());
            } else {
                log.warn("üö´ [ROUND_EVENT_BLOCKED] Round ID: {} | Event: {} | Reason: Business logic validation failed",
                    roundId, event);
            }
        } finally {
            // –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
            RoundStateMachineListener.clearRoundId();
        }
    }
}
